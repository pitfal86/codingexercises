Inheritance:

    Something IS something else (Car IS a Vehicle)(

    class = blueprint (house)
    reference = address to object
        House house = new House ();
        House newHouse = house;

        above both reference the same object
    instance = object created (new keyword)



    static or instance method?
    1. does it use any fields (instance variables) or instance method?
        yes = instance method
        no = static method

    static variables
    1. once changed, all other instances of that object will receive it (both old and new)
        ** Scanner is good instance of this.... since all user input should change all objects **
        private static String name;

        Dog rex = new (Dog("rex");
        Dog fluffy = new Dog ("fluffy");
        both above will have name as "fluffy" since fluffy was last set



Composition / Abstraction

    Something HAS Something else (Computer HAS a monitor) parts of a whole
    Jave limited to extending / inheritng only 1 class. This helps by making a base class HAVE multiple objects

    EX:
    PC HAS Case, Monitor, Motherboard
        Case HAS dimensions
        Monitor HAS Resolution


Encapsulation

    Restricting access (protecting members of a class)
    Making changes to internal application without affecting external consumers

    EX:
        getHealth()
            return this.health
        getHealth()
            return this.hitpoints


Polymorphism

    Actions to act differently based on the object created
    Unique functionality
     for a class that has inherited from a base class